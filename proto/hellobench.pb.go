// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hellobench.proto

package hellobench

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request/response message with minimum serialization/deserialization cost
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7f65ee3eecd06d8, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// The request/response message with some serialization/deserialization cost
type Something struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Something) Reset()         { *m = Something{} }
func (m *Something) String() string { return proto.CompactTextString(m) }
func (*Something) ProtoMessage()    {}
func (*Something) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7f65ee3eecd06d8, []int{1}
}

func (m *Something) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Something.Unmarshal(m, b)
}
func (m *Something) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Something.Marshal(b, m, deterministic)
}
func (m *Something) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Something.Merge(m, src)
}
func (m *Something) XXX_Size() int {
	return xxx_messageInfo_Something.Size(m)
}
func (m *Something) XXX_DiscardUnknown() {
	xxx_messageInfo_Something.DiscardUnknown(m)
}

var xxx_messageInfo_Something proto.InternalMessageInfo

func (m *Something) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "hellobench.Empty")
	proto.RegisterType((*Something)(nil), "hellobench.Something")
}

func init() { proto.RegisterFile("hellobench.proto", fileDescriptor_c7f65ee3eecd06d8) }

var fileDescriptor_c7f65ee3eecd06d8 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x4f, 0x4a, 0xcd, 0x4b, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xb1, 0x73, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x2a, 0xc9, 0x73, 0x71, 0x06, 0xe7, 0xe7,
	0xa6, 0x96, 0x64, 0x64, 0xe6, 0xa5, 0x0b, 0x09, 0x71, 0xb1, 0x94, 0xa4, 0x56, 0x94, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x46, 0xb5, 0x5c, 0xec, 0xee, 0x45, 0xa9, 0xa9, 0x25,
	0xa9, 0x45, 0x42, 0x46, 0x5c, 0x1c, 0xc1, 0x89, 0x95, 0x60, 0x7d, 0x42, 0x82, 0x7a, 0x48, 0xe6,
	0x83, 0x85, 0xa4, 0x30, 0x85, 0x94, 0x18, 0x84, 0xec, 0xb8, 0x78, 0x82, 0x13, 0x2b, 0x11, 0x56,
	0x88, 0x22, 0x2b, 0x82, 0x0b, 0x4b, 0x61, 0x17, 0x56, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xdd, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x75, 0x39, 0x63, 0x21, 0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayEmpty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Sends a greeting
	SaySomething(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayEmpty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hellobench.Greeter/SayEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SaySomething(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error) {
	out := new(Something)
	err := c.cc.Invoke(ctx, "/hellobench.Greeter/SaySomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayEmpty(context.Context, *Empty) (*Empty, error)
	// Sends a greeting
	SaySomething(context.Context, *Something) (*Something, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayEmpty(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayEmpty not implemented")
}
func (*UnimplementedGreeterServer) SaySomething(ctx context.Context, req *Something) (*Something, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaySomething not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hellobench.Greeter/SayEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayEmpty(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SaySomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Something)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SaySomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hellobench.Greeter/SaySomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SaySomething(ctx, req.(*Something))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hellobench.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayEmpty",
			Handler:    _Greeter_SayEmpty_Handler,
		},
		{
			MethodName: "SaySomething",
			Handler:    _Greeter_SaySomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellobench.proto",
}
